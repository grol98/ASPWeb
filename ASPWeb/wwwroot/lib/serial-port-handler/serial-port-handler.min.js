class SerialPortHandler{constructor(options,onConnect=()=>console.log("Device connected"),onDisconnect=undefined){this.encoder=new TextEncoder();this.decoder=new TextDecoder();this.options=options;this.port=null;this.isOpened=!1;this.onConnect=onConnect;this.EOT="\n";if(onDisconnect===undefined)
this.onDisconnect=this.#disconnectHandler();else this.onDisconnect=onDisconnect;this.#setupListeners()}
async open(){try{const port=await navigator.serial.requestPort();await port.open(this.options);this.port=port;this.isOpened=!0;return this.port.getInfo()}catch(error){console.error(error);throw error}}
async close(){await this.port.close();this.isOpened=!1}
    async write(data) { const writer = this.port.writable.getWriter(); const encoded = this.encoder.encode(data); await writer.write(encoded); writer.releaseLock() }
    async read() {
        while (this.port.readable) {
            const reader = this.port.readable.getReader(); let chunks = ''; try {
                while (!0) { const { value, done } = await reader.read(); const decoded = this.decoder.decode(value); chunks += decoded; if (done || decoded.includes(this.EOT)) { console.log(`Reading done.\n${chunks}`); reader.releaseLock(); break } }
return chunks}catch(error){console.error(error);throw error}finally{reader.releaseLock()}}}
async #disconnectHandler(){if(!this.isOpened)return;await this.close()}
#setupListeners(){navigator.serial.addEventListener('connect',this.onConnect);navigator.serial.addEventListener('disconnect',this.onDisconnect)}}